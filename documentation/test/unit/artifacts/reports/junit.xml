<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="SAJCMS Unit Tests" tests="38" failures="0" errors="0" time="3.977">
  <testsuite name="Utility Tests" errors="0" failures="0" skipped="0" timestamp="2024-12-19T22:23:00" time="3.34" tests="12">
    <testcase classname="Utility Tests TimeoutError should create a TimeoutError with correct properties" name="Utility Tests TimeoutError should create a TimeoutError with correct properties" time="0.008">
    </testcase>
    <testcase classname="Utility Tests RetryError should create a RetryError with correct properties" name="Utility Tests RetryError should create a RetryError with correct properties" time="0.001">
    </testcase>
    <testcase classname="Utility Tests isTimeoutError should correctly identify TimeoutError" name="Utility Tests isTimeoutError should correctly identify TimeoutError" time="0.001">
    </testcase>
    <testcase classname="Utility Tests isTimeoutError should return false for non-TimeoutError instances" name="Utility Tests isTimeoutError should return false for non-TimeoutError instances" time="0">
    </testcase>
    <testcase classname="Utility Tests isRetryError should correctly identify RetryError" name="Utility Tests isRetryError should correctly identify RetryError" time="0.001">
    </testcase>
    <testcase classname="Utility Tests isRetryError should return false for non-RetryError instances" name="Utility Tests isRetryError should return false for non-RetryError instances" time="0">
    </testcase>
    <testcase classname="Utility Tests Utility.withTimeout should resolve if the function completes within the timeout" name="Utility Tests Utility.withTimeout should resolve if the function completes within the timeout" time="0.001">
    </testcase>
    <testcase classname="Utility Tests Utility.withTimeout should reject with TimeoutError if the function exceeds the timeout" name="Utility Tests Utility.withTimeout should reject with TimeoutError if the function exceeds the timeout" time="1.003">
    </testcase>
    <testcase classname="Utility Tests Utility.withRetry should resolve if the function succeeds within the allowed attempts" name="Utility Tests Utility.withRetry should resolve if the function succeeds within the allowed attempts" time="0.103">
    </testcase>
    <testcase classname="Utility Tests Utility.withRetry should reject with RetryError after exceeding retry attempts" name="Utility Tests Utility.withRetry should reject with RetryError after exceeding retry attempts" time="0.203">
    </testcase>
    <testcase classname="Utility Tests Utility.withRetry should use exponential backoff if enabled" name="Utility Tests Utility.withRetry should use exponential backoff if enabled" time="0.604">
    </testcase>
    <testcase classname="Utility Tests Utility.withRetry should invoke onRetry callback on each retry" name="Utility Tests Utility.withRetry should invoke onRetry callback on each retry" time="0.104">
    </testcase>
  </testsuite>
  <testsuite name="WorkflowError Class" errors="0" failures="0" skipped="0" timestamp="2024-12-19T22:23:04" time="0.143" tests="4">
    <testcase classname="WorkflowError Class should create a WorkflowError with correct message and properties" name="WorkflowError Class should create a WorkflowError with correct message and properties" time="0.003">
    </testcase>
    <testcase classname="WorkflowError Class should include the cause if provided" name="WorkflowError Class should include the cause if provided" time="0.001">
    </testcase>
    <testcase classname="WorkflowError Class should include the error code if provided" name="WorkflowError Class should include the error code if provided" time="0.006">
    </testcase>
    <testcase classname="WorkflowError Class should include the correct timestamp if provided" name="WorkflowError Class should include the correct timestamp if provided" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Validation Functions" errors="0" failures="0" skipped="0" timestamp="2024-12-19T22:23:04" time="0.048" tests="10">
    <testcase classname="Validation Functions validateWorkflowInitialState should throw error for non-object initialState" name="Validation Functions validateWorkflowInitialState should throw error for non-object initialState" time="0.005">
    </testcase>
    <testcase classname="Validation Functions validateWorkflowInitialState should not throw error for valid object initialState" name="Validation Functions validateWorkflowInitialState should not throw error for valid object initialState" time="0">
    </testcase>
    <testcase classname="Validation Functions validateTaskPayload should throw error for non-object payload" name="Validation Functions validateTaskPayload should throw error for non-object payload" time="0.002">
    </testcase>
    <testcase classname="Validation Functions validateTaskPayload should not throw error for valid object payload" name="Validation Functions validateTaskPayload should not throw error for valid object payload" time="0">
    </testcase>
    <testcase classname="Validation Functions validateCircularDependency should throw error if hasCircularDependency returns true (workflow)" name="Validation Functions validateCircularDependency should throw error if hasCircularDependency returns true (workflow)" time="0.001">
    </testcase>
    <testcase classname="Validation Functions validateCircularDependency should not throw error if hasCircularDependency returns false (workflow)" name="Validation Functions validateCircularDependency should not throw error if hasCircularDependency returns false (workflow)" time="0">
    </testcase>
    <testcase classname="Validation Functions validateCircularDependency should throw error if hasCircularDependency returns true (task)" name="Validation Functions validateCircularDependency should throw error if hasCircularDependency returns true (task)" time="0.001">
    </testcase>
    <testcase classname="Validation Functions validateCircularDependency should not throw error if hasCircularDependency returns false (task)" name="Validation Functions validateCircularDependency should not throw error if hasCircularDependency returns false (task)" time="0">
    </testcase>
    <testcase classname="Validation Functions validateWorkflowCircularDependency should call hasCircularDependency with correct arguments (workflow)" name="Validation Functions validateWorkflowCircularDependency should call hasCircularDependency with correct arguments (workflow)" time="0.001">
    </testcase>
    <testcase classname="Validation Functions validateTaskCircularDependency should call hasCircularDependency with correct arguments (task)" name="Validation Functions validateTaskCircularDependency should call hasCircularDependency with correct arguments (task)" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="TaskError Class" errors="0" failures="0" skipped="0" timestamp="2024-12-19T22:23:04" time="0.059" tests="4">
    <testcase classname="TaskError Class should create a TaskError with correct message and properties" name="TaskError Class should create a TaskError with correct message and properties" time="0.004">
    </testcase>
    <testcase classname="TaskError Class should include the error code if provided" name="TaskError Class should include the error code if provided" time="0">
    </testcase>
    <testcase classname="TaskError Class should include cause if provided" name="TaskError Class should include cause if provided" time="0.001">
    </testcase>
    <testcase classname="TaskError Class should include timestamp in the error message" name="TaskError Class should include timestamp in the error message" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="GeneralError Class" errors="0" failures="0" skipped="0" timestamp="2024-12-19T22:23:04" time="0.039" tests="6">
    <testcase classname="GeneralError Class should create an instance with the correct properties" name="GeneralError Class should create an instance with the correct properties" time="0.003">
    </testcase>
    <testcase classname="GeneralError Class should default the cause to &quot;No additional cause&quot; if not provided" name="GeneralError Class should default the cause to &quot;No additional cause&quot; if not provided" time="0.001">
    </testcase>
    <testcase classname="GeneralError Class should return a formatted string from toString method" name="GeneralError Class should return a formatted string from toString method" time="0.001">
    </testcase>
    <testcase classname="GeneralError Class should handle missing stack trace correctly" name="GeneralError Class should handle missing stack trace correctly" time="0.001">
    </testcase>
    <testcase classname="GeneralError Class should identify a GeneralError instance using isGeneralError" name="GeneralError Class should identify a GeneralError instance using isGeneralError" time="0">
    </testcase>
    <testcase classname="GeneralError Class should return false when error is not an instance of GeneralError" name="GeneralError Class should return false when error is not an instance of GeneralError" time="0">
    </testcase>
  </testsuite>
  <testsuite name="hasCircularDependency" errors="0" failures="0" skipped="0" timestamp="2024-12-19T22:23:04" time="0.252" tests="2">
    <testcase classname="hasCircularDependency should return true for circular dependency" name="hasCircularDependency should return true for circular dependency" time="0.001">
    </testcase>
    <testcase classname="hasCircularDependency should return false for no circular dependency" name="hasCircularDependency should return false for no circular dependency" time="0">
    </testcase>
  </testsuite>
</testsuites>